'''
This method(CAMEL,see ./code/camel.py) demo use a deep feature[1] on Market-1501, download it
(Market_JSTL64.mat) from author's github page and put in ../data/. In my experience, Rank1 is 
40.42% calculated by lomo.tools.calc_cmc(just for temporary use, in fact it is not suitable 
for multi-shot), use the dist matrix generated by matlab source code, you will get the same 
result
2020/5/18
I have added the function calc_cmc_map(by author budui), and got Rank-1 54.60% and mAP 26.27%
, same with paper
see author's source code at https://github.com/KovenYu/CAMEL
References:
[1] T. Xiao, H. Li, W. Ouyang, and X. Wang. Learning deep feature representations with domain 
    guided dropout for person re-identification. In CVPR, 2016.
'''

import numpy as np
import os.path
import scipy.io as sio
from code.camel import camel,proj_data
from code.tools import cosine_dist,norm_labels_simultaneously,calc_cmc_map
from code.lomo.tools import calc_cmc,plot_cmc
from code.cprint import cprint_out

def load_data(*keys):
    '''return data of specified key(s), valid keys: data4train,data4test,data4query,para'''
    file_path=os.path.join(os.path.dirname(__file__),'../data/Market_JSTL64.mat')
    if len(keys)==0:
        return
    data=sio.loadmat(file_path)
    if 'para' in keys:
        para={}
        for i in data['para'][0][0].dtype.names:
            para[i]=np.squeeze(data['para'][0][0][i])
    return [data[i] if i!='para' else para for i in keys]

if __name__=='__main__':
    k=500 #10,200 etc. maybe ok, also with source code. The experiment has proved that the 
          #CAMEL is not limited by the value of K, it confuses me
    lambd=0.01
    para,trainX,queryX,testX=load_data('para','data4train','data4query','data4test')
    viewTrain,viewQuery,viewTest=norm_labels_simultaneously(para['idxViewTrain'], \
                                 para['idxViewQuery'],para['idxViewTest'])
    print('CAMEL running. This may take several minutes on Market-1501 ...')
    Us=camel(trainX,viewTrain,k,lambd)
    print('proj query data...')
    queryY=proj_data(queryX,viewQuery,Us)
    print('proj test data...')
    testY=proj_data(testX,viewTest,Us)
    print('calc dist matrix...')
    dist=cosine_dist(queryY,testY)
    print('calc cmc and map...')
    labelQuery,labelTest=norm_labels_simultaneously(para['labelQuery'],para['labelTest']) #
          #norm operation can avoid some bug, e.g. out of index range(and matlab index start from 1)
    # c=calc_cmc(dist.T,labelQuery,labelTest,100)#(lomo version) rank1:40.42%
    # plot_cmc(c,['market-1501'],verbose=True)
    cmc,map=calc_cmc_map(dist.T,labelQuery,labelTest,viewQuery,viewTest)
    plot_cmc(cmc[:100],['market-1501'],verbose=True)
    cprint_out('mAP: %.2f%%'%(map*100))
